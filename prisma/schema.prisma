// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id String @id @default(uuid())
  firstName String? @db.VarChar(30)
  lastName String? @db.VarChar(30)
  age Int?
  username String @db.VarChar(20) @unique
  email String @db.VarChar(320) @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes Note[]
  folders Folder[]
  refreshTokens RefreshToken[]
  isVerified        Boolean        @default(false)
  verificationEmail VerificationEmail?
  resetPasswordEmail ResetPasswordEmail?

  @@index([username], name: "username")
  @@index([email], name: "email")
}

model Note{
  id String @id @default(uuid())
  title String? @db.VarChar(255)
  content String? @db.Text
  isPinned Boolean @default(false)
  isArchived Boolean @default(false)
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  folder Folder? @relation(fields: [folderId], references: [id])
  folderId String?

  @@index([title], name: "noteTitle")
}

model Folder{
  id String @id @default(uuid())
  title String @db.VarChar(255)
  color String? @db.VarChar(7)
  isPinned Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  notes Note[]

  @@index([title], name: "folderTitle")
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationEmail {
  id          String    @id @default(uuid())
  token       String    @unique
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  userId      String    @unique
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetPasswordEmail {
  id          String    @id @default(uuid())
  token       String    @unique
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  userId      String    @unique
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}